{% extends 'base.html.twig' %}

{% block title %}Chat{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/chat.css') }}?v={{ 'now'|date('YmdHi') }}">
{% endblock %}

{% block body %}
    <div class="container p-0">
        <div class="chat-container">
            <div class="chat-header">
                <div class="partner-info">
                    {% set partner = chat.user1.id == app.session.get('user').id ? chat.user2 : chat.user1 %}
                    <div class="avatar" style="width: 48px; height: 48px;">
                        {% if partner.picture %}
                            <img src="{{ asset('uploads/' ~ partner.picture) }}" alt="{{ partner.username }}">
                        {% else %}
                            <img src="{{ asset('uploads/default.png') }}" alt="Photo par défaut">
                        {% endif %}
                    </div>
                    <div>
                        <h5 class="mb-0 fw-bold">{{ partner.username }}</h5>
                    </div>
                </div>
                <a href="{{ path('home') }}" class="btn home-button btn-sm text-white">
                    <i class="bi bi-house-door me-1"></i> Accueil
                </a>
            </div>

            <div class="chat-box" id="chat-messages">
                {% if messages|length > 0 %}
                    {% for message in messages %}
                        {% set isCurrentUser = message.sender.id == app.session.get('user').id %}
                        <div class="message-container {% if isCurrentUser %}current-user{% endif %}" data-message-id="{{ message.id }}">
                            {% if not isCurrentUser %}
                                <div class="avatar me-2" style="width: 32px; height: 32px;">
                                    {% if message.sender.picture %}
                                        <img src="{{ asset('uploads/' ~ message.sender.picture) }}" alt="{{ message.sender.username }}">
                                    {% else %}
                                        <img src="{{ asset('uploads/default.png') }}" alt="Photo par défaut">
                                    {% endif %}
                                </div>
                            {% endif %}

                            <div class="message-bubble {% if isCurrentUser %}current-user{% else %}partner{% endif %}">
                                <div class="message-text">
                                    {% if message.type == 'audio' %}
                                        <div class="audio-message">
                                            <audio controls>
                                                <source src="{{ asset(message.audioUrl) }}" type="audio/webm">
                                                Votre navigateur ne supporte pas la lecture audio.
                                            </audio>
                                        </div>
                                    {% else %}
                                        {{ message.content }}
                                    {% endif %}
                                </div>
                                <div class="message-time">
                                    {{ message.timestamp|date('H:i') }}
                                    {% if isCurrentUser %}
                                        <span class="read-indicator">
                                            <i class="bi bi-check2-all"></i>
                                        </span>
                                    {% endif %}
                                </div>

                                {% if isCurrentUser %}
                                    <button type="button" class="delete-message" data-message-id="{{ message.id }}">
                                        <i class="bi bi-trash text-danger" style="font-size: 12px;"></i>
                                    </button>
                                {% endif %}
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="empty-chat">
                        <i class="bi bi-chat-dots"></i>
                        <p class="fs-5 mb-0">Commencez la conversation...</p>
                        <p class="text-muted">Envoyez un message pour démarrer la discussion</p>
                    </div>
                {% endif %}
            </div>

            <div class="chat-footer">
                <div class="message-form">
                    <input type="text" id="message-input" class="chat-input" placeholder="Écrivez votre message..." autocomplete="off">
                    <button type="button" id="audio-button" class="audio-button">
                        <i class="bi bi-mic-fill"></i>
                    </button>
                    <button type="button" id="send-button" class="send-button">
                        <i class="bi bi-send-fill text-white"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        window.chatInitialized = false;
        window.chatInitializationInProgress = false;

        function initChat() {
            if (window.chatInitialized || window.chatInitializationInProgress) {
                return;
            }
            
            window.chatInitializationInProgress = true;
            
            if (window.chatEventSource) {
                window.chatEventSource.close();
                window.chatEventSource = null;
            }
            
            const chatBox = document.getElementById('chat-messages');
            const messageInput = document.getElementById('message-input');
            const sendButton = document.getElementById('send-button');
            const audioButton = document.getElementById('audio-button');
            const chatId = '{{ chat.id }}';
            const currentUserId = '{{ app.session.get('user').id }}';
            const baseUploadPath = "{{ app.request.schemeAndHttpHost }}";
            const defaultImagePath = "{{ asset('uploads/default.png') }}";

            let mediaRecorder;
            let audioChunks = [];
            let isRecording = false;

            scrollToBottom();

            function scrollToBottom() {
                chatBox.scrollTop = chatBox.scrollHeight;
            }

            function createMessageElement(message) {
                if (!message || !message.sender || !message.id) {
                    console.error('Message data is incomplete', message);
                    return null;
                }

                const isCurrentUser = message.sender.id === currentUserId;

                const messageContainer = document.createElement('div');
                messageContainer.className = `message-container ${isCurrentUser ? 'current-user' : ''}`;
                messageContainer.dataset.messageId = message.id;

                if (!isCurrentUser) {
                    const avatar = document.createElement('div');
                    avatar.className = 'avatar me-2';
                    avatar.style.width = '32px';
                    avatar.style.height = '32px';

                    const imgSrc = message.sender.picture 
                        ? `${baseUploadPath}/uploads/${message.sender.picture}` 
                        : defaultImagePath;

                    const img = document.createElement('img');
                    img.src = imgSrc;
                    img.alt = message.sender.username;

                    avatar.appendChild(img);
                    messageContainer.appendChild(avatar);
                }

                const messageBubble = document.createElement('div');
                messageBubble.className = `message-bubble ${isCurrentUser ? 'current-user' : 'partner'}`;

                const messageText = document.createElement('div');
                messageText.className = 'message-text';
                
                if (message.type === 'audio' && message.audioUrl) {
                    const audioContainer = document.createElement('div');
                    audioContainer.className = 'audio-message';
                    
                    const audio = document.createElement('audio');
                    audio.controls = true;
                    
                    const source = document.createElement('source');
                    source.src = message.audioUrl.startsWith('/') ? message.audioUrl : '/' + message.audioUrl;
                    source.type = 'audio/webm';
                    
                    audio.appendChild(source);
                    audioContainer.appendChild(audio);
                    messageText.appendChild(audioContainer);
                } else {
                    messageText.textContent = message.content || '';
                }

                const messageTime = document.createElement('div');
                messageTime.className = 'message-time';
                messageTime.textContent = message.timestamp || '';

                if (isCurrentUser) {
                    const readIndicator = document.createElement('span');
                    readIndicator.className = 'read-indicator';
                    readIndicator.innerHTML = '<i class="bi bi-check2-all"></i>';
                    messageTime.appendChild(readIndicator);

                    const deleteButton = document.createElement('button');
                    deleteButton.type = 'button';
                    deleteButton.className = 'delete-message';
                    deleteButton.dataset.messageId = message.id;
                    deleteButton.innerHTML = '<i class="bi bi-trash text-danger" style="font-size: 12px;"></i>';

                    deleteButton.addEventListener('click', function() {
                        if (confirm('Supprimer ce message ?')) {
                            deleteMessage(message.id);
                        }
                    });

                    messageBubble.appendChild(deleteButton);
                }

                messageBubble.appendChild(messageText);
                messageBubble.appendChild(messageTime);
                messageContainer.appendChild(messageBubble);

                return messageContainer;
            }

            function sendMessage(type = 'text', audioData = null) {
                const content = messageInput.value.trim();
                if (type === 'text' && !content) return;

                const messageData = {
                    type: type,
                    content: type === 'text' ? content : 'Message audio'
                };

                if (type === 'audio' && audioData) {
                    messageData.audioData = audioData;
                }

                fetch(`/chat/${chatId}/send`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(messageData)
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => { throw new Error(err.error || 'Network response was not ok'); });
                    }
                    return response.json();
                })
                .then(data => {
                    messageInput.value = '';
                    messageInput.focus();
                })
                .catch(error => {
                    console.error('Erreur lors de l\'envoi du message:', error);
                    alert('Erreur lors de l\'envoi du message. Veuillez réessayer.');
                });
            }

            function deleteMessage(messageId) {
                fetch(`/message/${messageId}/delete`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .catch(error => {
                    console.error('Erreur lors de la suppression du message:', error);
                    alert('Erreur lors de la suppression du message. Veuillez réessayer.');
                });
            }
            
            function markMessagesAsRead() {
                fetch(`/chat/${chatId}/read`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .catch(error => {
                    console.error('Erreur lors du marquage des messages comme lus', error);
                });
            }

            function initAudioRecording() {
                if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                    navigator.mediaDevices.getUserMedia({ audio: true })
                        .then(stream => {
                            mediaRecorder = new MediaRecorder(stream);
                            
                            mediaRecorder.ondataavailable = function(e) {
                                audioChunks.push(e.data);
                            };
                            
                            mediaRecorder.onstop = function() {
                                const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                                const reader = new FileReader();
                                reader.readAsDataURL(audioBlob);
                                reader.onloadend = function() {
                                    const base64data = reader.result;
                                    sendMessage('audio', base64data);
                                    audioChunks = [];
                                };
                            };
                        })
                        .catch(error => {
                            console.error("Erreur d'accès au microphone:", error);
                            alert("Impossible d'accéder au microphone. Veuillez vérifier vos paramètres.");
                        });
                } else {
                    alert("Votre navigateur ne supporte pas l'enregistrement audio.");
                    audioButton.style.display = 'none';
                }
            }

            audioButton.addEventListener('click', function() {
                if (!isRecording) {
                    audioChunks = [];
                    mediaRecorder.start();
                    isRecording = true;
                    audioButton.innerHTML = '<i class="bi bi-stop-fill"></i>';
                    audioButton.classList.add('recording');
                    messageInput.placeholder = 'Enregistrement en cours...';
                    messageInput.disabled = true;
                } else {
                    mediaRecorder.stop();
                    isRecording = false;
                    audioButton.innerHTML = '<i class="bi bi-mic-fill"></i>';
                    audioButton.classList.remove('recording');
                    messageInput.placeholder = 'Écrivez votre message...';
                    messageInput.disabled = false;
                }
            });

            if (window.sendButtonHandler) {
                sendButton.removeEventListener('click', window.sendButtonHandler);
            }
            if (window.messageInputHandler) {
                messageInput.removeEventListener('keypress', window.messageInputHandler);
            }

            window.sendButtonHandler = function() {
                sendMessage('text');
            };
            window.messageInputHandler = function(event) {
                if (event.key === 'Enter') {
                    sendMessage('text');
                }
            };

            sendButton.addEventListener('click', window.sendButtonHandler);
            messageInput.addEventListener('keypress', window.messageInputHandler);
            document.querySelectorAll('.delete-message').forEach(button => {
                button.addEventListener('click', function() {
                    if (confirm('Supprimer ce message ?')) {
                        deleteMessage(this.dataset.messageId);
                    }
                });
            });

            const mercureUrl = new URL('{{ mercure_public_url }}');
            mercureUrl.searchParams.append('topic', `chat/${chatId}`);
            window.chatEventSource = new EventSource(mercureUrl);
            window.chatEventSource.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);

                    if (data.action === 'delete') {
                        const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`);
                        if (messageElement) {
                            messageElement.remove();
                        }
                        return;
                    }
                    
                    if (data.sender && data.sender.id !== currentUserId) {
                        markMessagesAsRead();
                    }

                    // Vérification des données avant de créer l'élément message
                    if (!data || !data.sender || !data.id) {
                        console.error('Message data is incomplete', data);
                        return;
                    }

                    const messageElement = createMessageElement(data);
                    
                    // Vérifier si le message a été créé avec succès
                    if (messageElement) {
                        chatBox.appendChild(messageElement);

                        const emptyChat = document.querySelector('.empty-chat');
                        if (emptyChat) {
                            emptyChat.remove();
                        }

                        scrollToBottom();
                    }
                } catch (error) {
                    console.error('Error processing message:', error);
                }
            };

            window.chatEventSource.onerror = function(error) {
                console.error('EventSource error:', error);
                window.chatInitialized = false;
                window.chatInitializationInProgress = false;
                
                if (window.chatEventSource) {
                    window.chatEventSource.close();
                    window.chatEventSource = null;
                }
                
                setTimeout(() => {
                    if (!window.chatInitialized && !window.chatInitializationInProgress && document.querySelector('.chat-container')) {
                        initChat();
                    }
                }, 3000);
            };

            markMessagesAsRead();
            initAudioRecording();
            
            window.chatInitialized = true;
            window.chatInitializationInProgress = false;
        }

        // Faire en sorte que initChat soit appelé correctement
        document.addEventListener('DOMContentLoaded', function() {
            if (!window.chatInitialized && !window.chatInitializationInProgress) {
                initChat();
            }
        });

        document.addEventListener('visibilitychange', function() {
            if (document.visibilityState === 'visible' && document.querySelector('.chat-container')) {
                if(!window.chatInitialized) {
                    initChat();
                } else {
                    const chatId = '{{ chat.id }}';
                    fetch(`/chat/${chatId}/read`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                }
            }
        });

        window.addEventListener('beforeunload', function() {
            if (window.chatEventSource) {
                window.chatEventSource.close();
                window.chatEventSource = null;
            }
            
            window.chatInitialized = false;
            window.chatInitializationInProgress = false;
        });

        // Appeler initChat immédiatement pour garantir que le chat se charge correctement
        if (!window.chatInitialized && !window.chatInitializationInProgress) {
            initChat();
        }
    </script>
{% endblock %}